import ij.ImagePlus;
import ij.process.ImageProcessor;
import ij.plugin.filter.PlugInFilter;
import java.awt.Color;
import ij.*;


public class histogram_matching implements PlugInFilter {
    public int setup(String args, ImagePlus im) {
        return DOES_RGB;
    }
    public void run(ImageProcessor ip) {
        int M = ip.getWidth();
        int N = ip.getHeight();

        float[] red = new float[256];
        float[] green = new float[256];
        float[] blue = new float[256];

        Color color;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
               color = new Color(ip.getPixel(j,i));
               red[color.getRed()] += 1;
               green[color.getGreen()] += 1;
               blue[color.getBlue()] += 1;
            }
        }
        for (int j = 1; j < red.length; j++) {
            red[j] = red[j - 1] + red[j];
            green[j] = green[j - 1] + green[j];
            blue[j] = blue[j - 1] + blue[j];
        } 
        for (int j = 0; j < red.length; j++) {
            red[j] = red[j] / (M * N);
            green[j] = green[j] / (M * N);
            blue[j] = blue[j] / (M * N);
        }
        double[] benchmark_histogram_red = { 0.07534, 0.07534, 0.07534, 0.07562, 0.07731, 0.08328, 0.0933, 0.10553, 0.11899, 0.13383, 0.14814, 0.16208, 0.17585, 0.18751, 0.19711, 0.20534, 0.21196, 0.21648, 0.22048, 0.22418, 0.22728, 0.22987, 0.23266, 0.23532, 0.23761, 0.23989, 0.24192, 0.24358, 0.24542, 0.24722, 0.24868, 0.25019, 0.25128, 0.25287, 0.25422, 0.2557, 0.2568, 0.25822, 0.25927, 0.2604, 0.26185, 0.26299, 0.26429, 0.26555, 0.26653, 0.26805, 0.26944, 0.27088, 0.2722, 0.27348, 0.27491, 0.27634, 0.2777, 0.2793, 0.2805, 0.2817, 0.28331, 0.2846, 0.28583, 0.28737, 0.2888, 0.29045, 0.29187, 0.29337, 0.295, 0.29651, 0.29811, 0.29964, 0.3012, 0.30318, 0.3051, 0.307, 0.30913, 0.31145, 0.31362, 0.3161, 0.31824, 0.32066, 0.32334, 0.32581, 0.32869, 0.33144, 0.3346, 0.33752, 0.34108, 0.34438, 0.34773, 0.35132, 0.35537, 0.36017, 0.36441, 0.36956, 0.37482, 0.38002, 0.38576, 0.39083, 0.39664, 0.40219, 0.40854, 0.41503, 0.42179, 0.42896, 0.43625, 0.44395, 0.45316, 0.46136, 0.46993, 0.47931, 0.4898, 0.50122, 0.51287, 0.52464, 0.53775, 0.55127, 0.5635, 0.57581, 0.58734, 0.59915, 0.61102, 0.62334, 0.63563, 0.64877, 0.66364, 0.67761, 0.69197, 0.70637, 0.72065, 0.7363, 0.75316, 0.7707, 0.78744, 0.80392, 0.81797, 0.82952, 0.83941, 0.84874, 0.85836, 0.86826, 0.87733, 0.88713, 0.89652, 0.90576, 0.91645, 0.92627, 0.93549, 0.94433, 0.95165, 0.95817, 0.96388, 0.96878, 0.97277, 0.97598, 0.97837, 0.98018, 0.981, 0.98143, 0.98166, 0.9819, 0.98205, 0.98218, 0.98229, 0.98255, 0.98275, 0.98298, 0.98326, 0.98359, 0.98394, 0.98428, 0.98492, 0.98587, 0.98719, 0.98844, 0.99018, 0.99226, 0.99413, 0.9957, 0.99717, 0.99833, 0.99921, 0.99971, 0.99994, 0.99997, 0.99997, 0.99997, 0.99997, 0.99997, 0.99999, 0.99999, 0.99999, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        double[] benchmark_histogram_green = {0.07534, 0.07537, 0.07542, 0.07577, 0.0778, 0.08439, 0.09488, 0.10791, 0.12234, 0.13861, 0.15478, 0.17092, 0.18634, 0.20038, 0.21254, 0.22254, 0.23024, 0.2362, 0.24151, 0.24581, 0.2498, 0.25313, 0.25663, 0.25967, 0.26248, 0.26536, 0.26832, 0.27075, 0.27336, 0.27605, 0.27875, 0.28186, 0.28532, 0.28824, 0.29113, 0.29432, 0.29743, 0.30055, 0.30438, 0.30817, 0.31208, 0.31688, 0.3218, 0.32719, 0.33245, 0.33779, 0.34315, 0.34912, 0.35417, 0.36002, 0.36513, 0.3714, 0.37807, 0.38546, 0.39291, 0.40024, 0.40805, 0.41555, 0.42325, 0.43156, 0.44056, 0.45075, 0.46185, 0.4723, 0.48332, 0.49512, 0.50696, 0.51955, 0.53238, 0.54422, 0.55732, 0.57075, 0.5848, 0.59918, 0.61399, 0.62783, 0.64222, 0.65568, 0.66832, 0.68091, 0.6938, 0.70695, 0.72023, 0.73426, 0.74782, 0.76205, 0.77624, 0.79035, 0.80381, 0.81677, 0.8291, 0.84078, 0.85192, 0.86301, 0.87414, 0.88508, 0.89618, 0.90718, 0.91724, 0.92453, 0.93011, 0.93526, 0.94042, 0.94472, 0.94864, 0.95197, 0.95471, 0.95677, 0.95868, 0.95986, 0.96083, 0.96144, 0.96187, 0.96224, 0.96253, 0.96277, 0.96305, 0.96322, 0.96339, 0.96365, 0.96389, 0.96418, 0.9644, 0.96471, 0.96502, 0.96544, 0.96569, 0.96598, 0.96632, 0.9666, 0.96695, 0.96721, 0.96772, 0.96815, 0.96858, 0.969, 0.96956, 0.97027, 0.97102, 0.97173, 0.97249, 0.97339, 0.97448, 0.97542, 0.97665, 0.97774, 0.97879, 0.97948, 0.97993, 0.98038, 0.98072, 0.9812, 0.98141, 0.98157, 0.98162, 0.98184, 0.98196, 0.98212, 0.9822, 0.98234, 0.9825, 0.98271, 0.98293, 0.98312, 0.98347, 0.98373, 0.98408, 0.98454, 0.98534, 0.9864, 0.98782, 0.98917, 0.99083, 0.99266, 0.99433, 0.99612, 0.99748, 0.99844, 0.99926, 0.99975, 0.99996, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        double[] benchmark_histogram_blue = {0.07542, 0.07561, 0.0761, 0.07756, 0.08113, 0.08964, 0.10313, 0.12125, 0.14233, 0.1647, 0.18439, 0.20114, 0.21474, 0.22486, 0.23343, 0.23987, 0.24559, 0.25057, 0.2551, 0.25895, 0.26253, 0.26579, 0.26876, 0.2723, 0.27556, 0.27912, 0.28265, 0.28656, 0.29088, 0.29576, 0.30094, 0.30752, 0.31475, 0.32222, 0.32949, 0.33721, 0.34604, 0.35535, 0.36475, 0.37527, 0.38669, 0.3981, 0.41083, 0.42383, 0.43791, 0.45289, 0.46832, 0.48379, 0.50113, 0.51989, 0.53879, 0.55892, 0.57855, 0.59821, 0.61938, 0.63872, 0.65674, 0.67355, 0.68946, 0.70606, 0.72253, 0.73829, 0.75434, 0.76878, 0.78256, 0.79489, 0.80628, 0.81802, 0.82883, 0.83881, 0.84953, 0.86049, 0.87142, 0.8829, 0.89294, 0.90211, 0.91017, 0.9165, 0.92221, 0.92722, 0.9317, 0.93548, 0.93875, 0.94136, 0.94391, 0.94655, 0.94871, 0.95071, 0.95242, 0.95386, 0.95497, 0.95639, 0.95736, 0.95818, 0.95874, 0.95904, 0.95955, 0.95989, 0.96012, 0.96025, 0.96049, 0.96062, 0.96083, 0.961, 0.96124, 0.96135, 0.96157, 0.96175, 0.96196, 0.96221, 0.96243, 0.96254, 0.9627, 0.96294, 0.96332, 0.9636, 0.96381, 0.96412, 0.96429, 0.96462, 0.96489, 0.96525, 0.96555, 0.96592, 0.96631, 0.96672, 0.96726, 0.96767, 0.96818, 0.96868, 0.96934, 0.96985, 0.97035, 0.97093, 0.97144, 0.97208, 0.97282, 0.97386, 0.97482, 0.97601, 0.97699, 0.97782, 0.97848, 0.9792, 0.97963, 0.98009, 0.98042, 0.98066, 0.98082, 0.98111, 0.98122, 0.98135, 0.98146, 0.98163, 0.98177, 0.98196, 0.98212, 0.9822, 0.98233, 0.98252, 0.98272, 0.98294, 0.98331, 0.98357, 0.98384, 0.98422, 0.98484, 0.98555, 0.98656, 0.98771, 0.9887, 0.98964, 0.99089, 0.99273, 0.99432, 0.99592, 0.99736, 0.99847, 0.99929, 0.99975, 0.99996, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        
        int red_index;
        int green_index;
        int blue_index;
        double red_value;
        double green_value;
        double blue_value;
        double adj_red_value;
        int[] new_intensities = new int[3];
        for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    double diff_red = 2;
                    double diff_green = 2;
                    double diff_blue = 2;
                    color = new Color(ip.getPixel(j,i));
                    red_index = color.getRed();
                    green_index = color.getGreen();
                    blue_index = color.getBlue();
                    
                    red_value = red[red_index];
                    green_value = green[green_index];
                    blue_value = blue[blue_index];

                    for (int h = 0; h < 256; h++) {
                        if (Math.abs(benchmark_histogram_red[h] - red_value) < diff_red) {
                            diff_red = Math.abs(benchmark_histogram_red[h] - red_value);
                            new_intensities[0] = h;
                        }
                        if (Math.abs(benchmark_histogram_green[h] - green_value) < diff_green) {
                            diff_green = Math.abs(benchmark_histogram_green[h] - green_value);
                            new_intensities[1] = h;
                        }
                        if (Math.abs(benchmark_histogram_blue[h] - blue_value) < diff_blue) {
                            diff_blue = Math.abs(benchmark_histogram_blue[h] - blue_value);
                            new_intensities[2] = h;
                        }
                    }
                    ip.putPixel(j, i, new_intensities);
                }
        } 
    }
    
}